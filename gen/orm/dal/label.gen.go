// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"goBackend-demo/gen/orm/model"
)

func newLabel(db *gorm.DB, opts ...gen.DOOption) label {
	_label := label{}

	_label.labelDo.UseDB(db, opts...)
	_label.labelDo.UseModel(&model.Label{})

	tableName := _label.labelDo.TableName()
	_label.ALL = field.NewAsterisk(tableName)
	_label.Cid = field.NewInt32(tableName, "Cid")
	_label.Cname = field.NewString(tableName, "Cname")

	_label.fillFieldMap()

	return _label
}

type label struct {
	labelDo

	ALL   field.Asterisk
	Cid   field.Int32  // 标签id
	Cname field.String // 标签名

	fieldMap map[string]field.Expr
}

func (l label) Table(newTableName string) *label {
	l.labelDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l label) As(alias string) *label {
	l.labelDo.DO = *(l.labelDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *label) updateTableName(table string) *label {
	l.ALL = field.NewAsterisk(table)
	l.Cid = field.NewInt32(table, "Cid")
	l.Cname = field.NewString(table, "Cname")

	l.fillFieldMap()

	return l
}

func (l *label) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *label) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 2)
	l.fieldMap["Cid"] = l.Cid
	l.fieldMap["Cname"] = l.Cname
}

func (l label) clone(db *gorm.DB) label {
	l.labelDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l label) replaceDB(db *gorm.DB) label {
	l.labelDo.ReplaceDB(db)
	return l
}

type labelDo struct{ gen.DO }

func (l labelDo) Debug() *labelDo {
	return l.withDO(l.DO.Debug())
}

func (l labelDo) WithContext(ctx context.Context) *labelDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l labelDo) ReadDB() *labelDo {
	return l.Clauses(dbresolver.Read)
}

func (l labelDo) WriteDB() *labelDo {
	return l.Clauses(dbresolver.Write)
}

func (l labelDo) Session(config *gorm.Session) *labelDo {
	return l.withDO(l.DO.Session(config))
}

func (l labelDo) Clauses(conds ...clause.Expression) *labelDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l labelDo) Returning(value interface{}, columns ...string) *labelDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l labelDo) Not(conds ...gen.Condition) *labelDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l labelDo) Or(conds ...gen.Condition) *labelDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l labelDo) Select(conds ...field.Expr) *labelDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l labelDo) Where(conds ...gen.Condition) *labelDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l labelDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *labelDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l labelDo) Order(conds ...field.Expr) *labelDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l labelDo) Distinct(cols ...field.Expr) *labelDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l labelDo) Omit(cols ...field.Expr) *labelDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l labelDo) Join(table schema.Tabler, on ...field.Expr) *labelDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l labelDo) LeftJoin(table schema.Tabler, on ...field.Expr) *labelDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l labelDo) RightJoin(table schema.Tabler, on ...field.Expr) *labelDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l labelDo) Group(cols ...field.Expr) *labelDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l labelDo) Having(conds ...gen.Condition) *labelDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l labelDo) Limit(limit int) *labelDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l labelDo) Offset(offset int) *labelDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l labelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *labelDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l labelDo) Unscoped() *labelDo {
	return l.withDO(l.DO.Unscoped())
}

func (l labelDo) Create(values ...*model.Label) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l labelDo) CreateInBatches(values []*model.Label, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l labelDo) Save(values ...*model.Label) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l labelDo) First() (*model.Label, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Label), nil
	}
}

func (l labelDo) Take() (*model.Label, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Label), nil
	}
}

func (l labelDo) Last() (*model.Label, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Label), nil
	}
}

func (l labelDo) Find() ([]*model.Label, error) {
	result, err := l.DO.Find()
	return result.([]*model.Label), err
}

func (l labelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Label, err error) {
	buf := make([]*model.Label, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l labelDo) FindInBatches(result *[]*model.Label, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l labelDo) Attrs(attrs ...field.AssignExpr) *labelDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l labelDo) Assign(attrs ...field.AssignExpr) *labelDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l labelDo) Joins(fields ...field.RelationField) *labelDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l labelDo) Preload(fields ...field.RelationField) *labelDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l labelDo) FirstOrInit() (*model.Label, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Label), nil
	}
}

func (l labelDo) FirstOrCreate() (*model.Label, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Label), nil
	}
}

func (l labelDo) FindByPage(offset int, limit int) (result []*model.Label, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l labelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l labelDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l labelDo) Delete(models ...*model.Label) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *labelDo) withDO(do gen.Dao) *labelDo {
	l.DO = *do.(*gen.DO)
	return l
}
